buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id "org.sonarqube" version "2.6"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'


version = '0.0.1'

jar {
    baseName = 'spring-testing'
}

sourceCompatibility = 1.8

dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	compile('org.springframework.boot:spring-boot-starter-web') {
		exclude module: 'spring-boot-starter-tomcat'
	}
	compile("org.springframework.boot:spring-boot-starter-jetty")
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('com.h2database:h2')
	testCompile('io.rest-assured:rest-assured:3.0.3')
	testCompile('com.github.tomakehurst:wiremock:2.6.0')
	testCompile('au.com.dius:pact-jvm-consumer-junit_2.12:3.5.5')
	testCompile('au.com.dius:pact-jvm-provider-spring_2.12:3.5.5')
}


sourceSets {
	integration {
    	java.srcDir "$projectDir/src/integration/java"
    	resources.srcDir "$projectDir/src/integration/resources"
    	compileClasspath += main.output + test.output
    	runtimeClasspath += main.output + test.output
    }
    contract {
    	java.srcDir "$projectDir/src/contract/java"
    	resources.srcDir "$projectDir/src/contract/resources"
    	compileClasspath += main.output + test.output
    	runtimeClasspath += main.output + test.output
    }
    
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
    contractImplementation.extendsFrom testImplementation
    contractRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    description = 'Runs all integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integration.output.classesDir
    classpath = sourceSets.integration.runtimeClasspath
    outputs.upToDateWhen { false }
}

task contractTest(type: Test) {
    description = 'Runs all Contract tests.'
    group = 'verification'
    testClassesDir = sourceSets.contract.output.classesDir
    classpath = sourceSets.contract.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest


repositories {
	mavenCentral()
}


jacoco {
	toolVersion = "0.7.9"
	reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
}

test {
 	testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    
	jacoco {
		append = false
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		classDumpDir = file("$buildDir/jacoco/classpathdumps")
	}
}

integrationTest {
 	testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    
	jacoco {
		append = false
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		classDumpDir = file("$buildDir/jacoco/classpathdumps")
	}
}

contractTest {
 	testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    
	jacoco {
		append = false
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		classDumpDir = file("$buildDir/jacoco/classpathdumps")
	}
}